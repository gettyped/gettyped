#+TITLE:        type : Maybe
#+AUTHOR:       Jeremy Hughes
#+EMAIL:        jedahu@gmail.com
#+DATE:         <2016-08-25 Thu> 

#+INCLUDE: _nav.org

* Introduction                                                        :notoc:
:PROPERTIES:
:HTML_CONTAINER_CLASS: hide
:END:
#+NAME: motivation
#+BEGIN_MOTIVATION
- Handle optional values without guessing and without exceptions
- Maintain type invariants in smart constructors
#+END_MOTIVATION

~Maybe~ guarantees exception free and guess free optional value handling by
providing only one function for getting at the optional value, a function that
requires function arguments that handle both present and absent states.

#+BEGIN_TYPE_INFO
- type :: src_scala{Maybe[A]}
- impl :: [[https://hackage.haskell.org/package/base/docs/Data-Maybe.html][Haskell]]([[https://hackage.haskell.org/package/base/docs/src/Data.Maybe.html][src]]), [[https://doc.rust-lang.org/std/option/][Rust]]([[https://doc.rust-lang.org/src/core/up/src/libcore/option.rs.html][src]]), [[https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/core.option-module-%5Bfsharp%5D][F#]]([[https://github.com/fsharp/fsharp/blob/master/src/fsharp/FSharp.Core/option.fs][src]])
- docs :: [[https://wiki.haskell.org/Maybe][Haskell wiki]], [[https://fsharpforfunandprofit.com/posts/the-option-type/][F# post]], [[https://en.wikipedia.org/wiki/Option_type][Wikipedia]]
#+END_TYPE_INFO

* Implementation
** Type
Values of src_scala{Maybe[A]} either contain a single value of ~A~ or nothing.
#+NAME: maybe-type
#+BEGIN_SRC scala
  sealed abstract class Maybe[A]
#+END_SRC

** Cases
It is usually implemented as a sum type with nullary and 1-ary “cases”.
#+NAME: sum-cases
#+BEGIN_SRC scala
  private final case class Nothing[A]() extends Maybe[A] {}

  private final case class Just[A](a: A) extends Maybe[A] {}
#+END_SRC

** Constructors
Since it makes no sense to have src_scala{Nothing[A]} and src_scala{Some[A]} types available, we’ll
make them private and provide two constructor functions.
#+NAME: constructors
#+BEGIN_SRC scala
  object Maybe {
    def nothing[A]: Maybe[A] = Nothing()

    def just[A](a: A): Maybe[A] = Just(a)
  }
#+END_SRC

** Fold method
There is only one method with access to the private internals of src_scala{Maybe[A]}.
#+NAME: fold-method
#+BEGIN_SRC scala
  def fold[B](nothing: => B, just: A => B): B = this match {
    case Nothing() => nothing
    case Just(a)   => just(a)
  }
#+END_SRC

There is no way to dereference the Maybe-wrapped value directly. src_scala{fold} ensures
that the src_scala{Nothing} case is handled.

** Complete
Here’s the complete definition.
#+NAME: Maybe
#+BEGIN_SRC scala :tangle ../../scala/src/gettyped/Maybe.scala
  package gettyped

  <<maybe-type>> {
    <<fold-method>>
  }

  <<sum-cases>>

  <<constructors>>
#+END_SRC

#+BEGIN_SRC scala :tangle ../../scala-fiddle/Maybe.scala :exports none
  <<Maybe>>

  object ScalaJSExample extends js.JSApp {
    def main(): Unit = {
      println("Compile success")
    }
  }
#+END_SRC

* Maybe vs null
Assuming the following values:

#+NAME: case-handlers
#+BEGIN_SRC scala
  final case class Name(first: String, last: String)

  val absent: String = "Nobody"

  def present(n: Name): String = s"${n.first} ${n.last}"
#+END_SRC

A typical null-check,

#+NAME: null-check
#+BEGIN_SRC scala
  def describe(n: Name): String =
    if (n == null) absent else present(n)
#+END_SRC

exhibits a lack of type safety in two ways:

- assumption ::
     The programmer assumes src_scala{n} is not src_scala{null} and doesn’t write the null check.
- boolean blindness ::
     The compiler doesn’t stop accidental dereferencing, as in this
     transposition:
     #+NAME: transposed-null-check
     #+BEGIN_SRC scala
       def describeT(n: Name): String =
         if (n == null) present(n) else absent
     #+END_SRC

Boolean blindness is [[bb][well described by Robert Harper]]. Here’s the money quote:

#+LINK: bb https://existentialtype.wordpress.com/2011/03/15/boolean-blindness/
     
#+BEGIN_QUOTE
Another harm is the condition of Boolean blindness alluded to earlier. Suppose
that I evaluate the expression e=e’ to test whether e and e’ are equal. I have
in my hand a bit. The bit itself has no intrinsic meaning; I must associate a
provenance with that bit in order to give it meaning. “This bit being true
means that e and e’ are equal, whereas this other bit being false means that
some other two expressions are not equal.” Keeping track of this information
(or attempting to recover it using any number of program analysis techniques) is
notoriously difficult. The only thing you can do with a bit is to branch on it,
and pretty soon you’re lost in a thicket of if-the-else’s, and you lose track
of what’s what. Evolve the program a little, and you’re soon out to sea, and
find yourself in need of sat solvers to figure out what the hell is going on.
#+END_QUOTE

src_scala{Maybe} solves both issues.

- assumption ::
     The programmer cannot get at the value of a src_scala{Maybe} without going through
     src_scala{Maybe.fold}.
- boolean blindness ::
     src_scala{Maybe.fold} provides a value only to the src_scala{just} case:
     #+NAME: fold
     #+BEGIN_SRC scala
       def describe(n: Maybe[Name]): String =
         n.fold(absent, present)
     #+END_SRC
     An accidental transposition results in a compile time error:
     #+NAME: transposed-fold
     #+BEGIN_SRC scala
       def describeT(n: Maybe[Name]): String =
         n.fold(present, absent)
     #+END_SRC

** Type-level honesty
src_scala{null} is not a src_scala{String} but the Scala compiler treats it as a valid inhabitant of
the src_scala{String} type. This is the case for all reference types in Scala, C#, Java,
and most languages.

It is an enormous hole in the type safety of these languages. Their compilers
will not allow a src_scala{String} method call on a src_scala{Date} value, but they will allow the
same method call on a src_scala{null} value as long as it is typed as a src_scala{String}. Calling
src_scala{String.replace()} on a src_scala{Date} will be caught at compile time but calling it on src_scala{null}
will not.

src_scala{null} inhabiting all reference types creats problems at function boundaries. It
makes it impossible to declare to the compiler that a function /does not/ take or
return src_scala{null}. This means that:
- Callers don’t know if src_scala{null} is an acceptable argument value.
- Callers don’t know if the function might return src_scala{null}.
- Function implementation must account for src_scala{null} inputs whether or not they are
  supposed to be part of the function domain.

These issues are dealt with usually by:
- Defensively throwing errors on unacceptable src_scala{null} inputs.
- Assuming return values are not-null unless the documentation says otherwise.

The core failure here is that neither the programmer nor the compiler can tell
whether src_scala{Func[RefType, RefType]} accepts or returns src_scala{null} values.

If src_scala{null} did not exist, there would be no confusion. src_scala{Type} would represent a set
of values exclusive of src_scala{null}, and src_scala{Maybe[Type]} the same set plus the src_scala{nothing}
value. There would be no ambiguity at function boundaries.

For honest reference types:
- Write as if src_scala{null} does not exist.
- Use src_scala{Maybe} for optional values.
- Convert between (possibly src_scala{null}) src_scala{A} and src_scala{Maybe[A]} at the boundaries of “honest”
  and “dishonest” code.

** Demos
- [[scala-js-fiddle:Maybe_null.scala][Null-check transposition with runtime failure]]. Scala-Js-Fiddle optimizes the
  generated Javascript, so member names in error output will not necessarily
  match those in the source file.
  #+BEGIN_SRC scala :tangle ../../scala-fiddle/Maybe_null.scala :exports none
    // See https://gettyped.github.io/type/Maybe.html
    <<Maybe>>

    object ScalaJSExample extends js.JSApp {
      <<case-handlers>>

      <<null-check>>

      <<transposed-null-check>>

      val names: List[Name] =
        List(
          Name("Jane", "Doe"),
          null,
          Name("John", "Doe"))

      def main(): Unit = {
        println("describe")
        names.foreach { n => println(describe(n)) }
        println("........")
        println("describeT")
        names.foreach { n => println(describeT(n)) }
      }
    }
  #+END_SRC

- [[scala-js-fiddle:Maybe_no_null.scala][Transposition with compile time failure]]. Uncomment the indicated code to cause
  compile errors.
  #+BEGIN_SRC scala :tangle ../../scala-fiddle/Maybe_no_null.scala :exports none
    // See https://gettyped.github.io/type/Maybe.html
    <<Maybe>>

    object ScalaJSExample extends js.JSApp {
      import Maybe._

      <<case-handlers>>

      <<fold>>

      /// Uncomment `describeT` and this file will fail to compile.
      // <<transposed-fold>>

      val names: List[Maybe[Name]] =
        List(
          just(Name("Jane", "Doe")),
          nothing,
          just(Name("John", "Doe")))

      def main(): Unit = {
        println("describe")
        names.foreach { n => println(describe(n)) }
      }
    }
  #+END_SRC

* Smart constructors and invariants
src_scala{Maybe} can be used to enforce a type’s invariants. A trivial example is a type
for integers greater than zero.

- src_scala{Natural} ::
     The type of integers src_scala{> 0}.
- src_scala{natural: Int => Maybe[Natural]} ::
     The only constructor for src_scala{Natural} values. It returns src_scala{nothing} if its input is
     src_scala{< 1}. This creates a compile time guarantee that src_scala{Natural} values will always
     be src_scala{> 0}.

#+BEGIN_SRC scala
  final class Natural private(n: Int) {
    val value: Int = n
  }

  object Natural {
    import Maybe._

    def natural(n: Int): Maybe[Natural] =
      if (n > 0) just(Natural(n)) else nothing
  }
#+END_SRC
